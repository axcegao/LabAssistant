import telebot
import numpy as np
import matplotlib.pyplot as plt
import os
from telebot import types

TOKEN = "my token"
bot = telebot.TeleBot(TOKEN)
stage = 0

@bot.message_handler(commands=['start'])
def start(message):
    global stage
    markup = types.InlineKeyboardMarkup()
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç, {0.first_name}üëã! –Ø LabAssistant - –ø—Ä–æ–≥—Ä–∞–º–º–∞-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –º–æ–ª–æ–¥–æ–º—É —É—á–µ–Ω–æ–º—É. –ú–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /function. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /select_calc."
                     .format(message.from_user), reply_markup=markup)
    stage = 0 
    
@bot.message_handler(commands=['function'])
def function(message):
    markup = types.InlineKeyboardMarkup()
    bot.send_message(message.chat.id,
                     "–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:\n1.–Ø –º–æ–≥—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –∏–∑–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —ç–Ω–µ—Ä–≥–∏—é —Ñ–æ—Ç–æ–Ω–æ–≤ –≤ –¥–ª–∏–Ω—É –≤–æ–ª–Ω—ã —Å–≤–µ—Ç–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ.‚úÖ\n2.–Ø –º–æ–≥—É –≤—ã—á–∏—Å–ª—è—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏—è —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞ –∏ –µ–≥–æ —à–∏—Ä–∏–Ω—ã –Ω–∞ –ø–æ–ª—É–≤—ã—Å–æ—Ç–µ –ø–æ —Å–ø–µ–∫—Ç—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt, –∞ —Ç–∞–∫–∂–µ –≤—ã–≤–µ–¥—É –≥—Ä–∞—Ñ–∏–∫ —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø–∏–∫–∞ –∏ –µ–≥–æ —à–∏—Ä–∏–Ω—ã –Ω–∞ –ø–æ–ª—É–≤—ã—Å–æ—Ç–µ.‚úÖ\n3.–Ø –º–æ–≥—É –≤—ã—á–∏—Å–ª–∏—Ç—å —Ñ–ª—é–µ–Ω—Å –ª–∞–∑–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ —Å—Ä–µ–¥–Ω–µ–π –º–æ—â–Ω–æ—Å—Ç–∏.‚úÖ\n4.–Ø –º–æ–≥—É —Å–æ–±–∏—Ä–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.‚úÖ\n–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–¥–Ω–æ–π –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /select_calc.",
                     reply_markup=markup)
    
@bot.message_handler(commands=['select_calc'])
def select_calc(message):
    markup = types.InlineKeyboardMarkup()
    itembtn1 = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–≤–æ–¥ –µ–¥–∏–Ω–∏—Ü", callback_data='–í–∞—Ä–∏–∞–Ω—Ç 1')
    itembtn2 = types.InlineKeyboardButton(text="–ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞", callback_data='–í–∞—Ä–∏–∞–Ω—Ç 2')
    itembtn3 = types.InlineKeyboardButton(text="–§–ª—é–µ–Ω—Å –ª–∞–∑–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã", callback_data='–í–∞—Ä–∏–∞–Ω—Ç 3')
    markup.add(itembtn1, itembtn2, itembtn3)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å: ", reply_markup=markup)
    
def calc(message, variant):
    global stage
    if variant == '–í–∞—Ä–∏–∞–Ω—Ç 1':
        markup = types.InlineKeyboardMarkup()
        itembtn1 = types.InlineKeyboardButton(text="–ß–∞—Å—Ç–æ—Ç–∞->–î–ª–∏–Ω–∞",
                                          callback_data='–í–∞—Ä–∏–∞–Ω—Ç 5')
        itembtn2 = types.InlineKeyboardButton(text="–≠–Ω–µ—Ä–≥–∏—è->–î–ª–∏–Ω–∞",
                                          callback_data='–í–∞—Ä–∏–∞–Ω—Ç 6')
        itembtn3 = types.InlineKeyboardButton(text="–î–ª–∏–Ω–∞->–≠–Ω–µ—Ä–≥–∏—è",
                                          callback_data='–í–∞—Ä–∏–∞–Ω—Ç 7')
        itembtn4 = types.InlineKeyboardButton(text="–î–ª–∏–Ω–∞->–ß–∞—Å—Ç–æ—Ç–∞",
                                          callback_data='–í–∞—Ä–∏–∞–Ω—Ç 8')
        markup.add(itembtn1, itembtn2, itembtn3, itembtn4)
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏: ", reply_markup=markup)
        stage = 2
    elif variant == '–í–∞—Ä–∏–∞–Ω—Ç 2':
        bot.send_message(message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–ø–µ–∫—Ç—Ä–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt.\n–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ")
        send_example_file(message.chat.id)
        stage = 11
    elif variant == '–í–∞—Ä–∏–∞–Ω—Ç 3':
        markup = types.InlineKeyboardMarkup()
        itembtn1 = types.InlineKeyboardButton(text="–î–∞", callback_data='–î–∞')
        itembtn2 = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data='–ù–µ—Ç')
        markup.add(itembtn1, itembtn2)
        bot.send_message(message.chat.id, "–¢—ã –≤—ã–±—Ä–∞–ª —Ñ—É–Ω–∫—Ü–∏—é: –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–ª—é–µ–Ω—Å–∞ –ø–æ —Å—Ä–µ–¥–Ω–µ–π –º–æ—â–Ω–æ—Å—Ç–∏, –Ω–∞—á–∞—Ç—å? ", reply_markup=markup)
        stage = 7

def calc_next(message, variant):
    global stage
    global per
    if variant == '–í–∞—Ä–∏–∞–Ω—Ç 5':
        per = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —á–∞—Å—Ç–æ—Ç—É –∏–∑–ª—É—á–µ–Ω–∏—è(–ì—Ü): ")
        bot.register_next_step_handler(per, next_calc)
        stage = 3
    elif variant == '–í–∞—Ä–∏–∞–Ω—Ç 6':
        per1 = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —ç–Ω–µ—Ä–≥–∏—é —Ñ–æ—Ç–æ–Ω–∞(–î–∂): ")
        bot.register_next_step_handler(per1, nexxt_calc)
        stage = 4
    elif variant == '–í–∞—Ä–∏–∞–Ω—Ç 7':
        per2 = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –¥–ª–∏–Ω—É –≤–æ–ª–Ω—ã (–º): ")
        bot.register_next_step_handler(per2, nexxxt_calc)
        stage = 5
    elif variant == '–í–∞—Ä–∏–∞–Ω—Ç 8':
        per3 = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –¥–ª–∏–Ω—É –≤–æ–ª–Ω—ã (–º): ")
        bot.register_next_step_handler(per3, nexxxxt_calc)
        stage = 6

def next_calc(message):
    global stage
    frequency = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        frequency = float(frequency)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
        if frequency >= 0:
            result = 3 * 10**8 / frequency
            bot.send_message(message.chat.id, f"–î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã: {result} –º")
            bot.send_message(message.chat.id, f"–î–∏–∞–ø–∞–∑–æ–Ω –≤–æ–ª–Ω—ã: {get_wave_range(result)}")
            markup = types.InlineKeyboardMarkup()
            itembtn1 = types.InlineKeyboardButton(text="–î–∞", callback_data='–î–∞')
            itembtn2 = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data='–ù–µ—Ç')
            markup.add(itembtn1, itembtn2)
            bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞?", reply_markup=markup)
            stage = 1
        else:
            bot.send_message(message.chat.id, "–ß–∞—Å—Ç–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.‚ùå\n–î–ª—è –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∏–∏ –≤–≤–µ–¥–∏ /select_calc.")
            stage = 0
    except ValueError:
        bot.send_message(message.chat.id, "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ã–º.‚ùå\n–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤ —á–∏—Å–ª–æ —Ç–∏–ø–∞ float ',' –∞ –Ω–µ '.'.\n–î–ª—è –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∏–∏ –≤–≤–µ–¥–∏ /select_calc.")
        stage = 0

def nexxt_calc(message):
    global stage
    energy = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        energy = float(energy)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
        if energy >= 0:
            h = 6.626e-34  # –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ü–ª–∞–Ω–∫–∞ (–î–∂¬∑—Å)
            c = 3e8  # –°–∫–æ—Ä–æ—Å—Ç—å —Å–≤–µ—Ç–∞ (–º/—Å)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –¥–ª–∏–Ω—ã –≤–æ–ª–Ω—ã
            result = (h * c) / energy
            bot.send_message(message.chat.id, f"–î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã: {result} –º")
            bot.send_message(message.chat.id, f"–î–∏–∞–ø–∞–∑–æ–Ω –≤–æ–ª–Ω—ã: {get_wave_range(result)}")
            markup = types.InlineKeyboardMarkup()
            itembtn1 = types.InlineKeyboardButton(text="–î–∞", callback_data='–î–∞')
            itembtn2 = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data='–ù–µ—Ç')
            markup.add(itembtn1, itembtn2)
            bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞?", reply_markup=markup)
            stage = 1
        else:
            bot.send_message(message.chat.id, "–≠–Ω–µ—Ä–≥–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.‚ùå\n–î–ª—è –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ /select_calc.")
            stage = 0 
    except ValueError:
        bot.send_message(message.chat.id, "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º.‚ùå\n–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤ —á–∏—Å–ª–æ —Ç–∏–ø–∞ float ',' –∞ –Ω–µ '.'.\n–î–ª—è –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ /select_calc.")
        stage = 0

def nexxxt_calc(message):
    global stage
    wave_length = message.text
    try:
        wave_length = float(wave_length)
        if wave_length > 0:
            h = 6.626e-34  # –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ü–ª–∞–Ω–∫–∞ (–î–∂¬∑—Å)
            c = 3e8  # –°–∫–æ—Ä–æ—Å—Ç—å —Å–≤–µ—Ç–∞ (–º/—Å)
            energy = (h * c) / wave_length
            bot.send_message(message.chat.id, f"–≠–Ω–µ—Ä–≥–∏—è: {energy} –î–∂")
            markup = types.InlineKeyboardMarkup()
            itembtn1 = types.InlineKeyboardButton(text="–î–∞", callback_data='–î–∞')
            itembtn2 = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data='–ù–µ—Ç')
            markup.add(itembtn1, itembtn2)
            bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞?", reply_markup=markup)
            stage = 1
        else:
            bot.send_message(message.chat.id, "–î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.‚ùå\n–î–ª—è –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ /select_calc.")
            stage = 0
    except ValueError:
        bot.send_message(message.chat.id, "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º.‚ùå\n–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤ —á–∏—Å–ª–æ —Ç–∏–ø–∞ float ',' –∞ –Ω–µ '.'.\n–î–ª—è –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ /select_calc.")
        stage = 0

def nexxxxt_calc(message):
    global stage
    wave_length = message.text
    try:
        wave_length = float(wave_length)
        if wave_length > 0:
            frequency = 3e8 / wave_length  # –§–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —á–∞—Å—Ç–æ—Ç—ã
            bot.send_message(message.chat.id, f"–ß–∞—Å—Ç–æ—Ç–∞: {frequency} –ì—Ü")
            markup = types.InlineKeyboardMarkup()
            itembtn1 = types.InlineKeyboardButton(text="–î–∞", callback_data='–î–∞')
            itembtn2 = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data='–ù–µ—Ç')
            markup.add(itembtn1, itembtn2)
            bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞?", reply_markup=markup)
            stage = 1
        else:
            bot.send_message(message.chat.id, "–î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.‚ùå\n–î–ª—è –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ /select_calc.")
            stage = 0
    except ValueError:
        bot.send_message(message.chat.id, "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º.‚ùå\n–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤ —á–∏—Å–ª–æ —Ç–∏–ø–∞ float ',' –∞ –Ω–µ '.'.\n–î–ª—è –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ /select_calc.")
        stage = 0

def get_wave_range(result):
        if result < 1e-11:
            return "–ì–∞–º–º–∞-–ª—É—á–∏"
        elif 1e-11 <= result < 1e-8:
            return "–†–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–µ –ª—É—á–∏"
        elif 1e-8 <= result < 4e-7:
            return "–£–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç"
        elif 4e-7 <= result < 7e-7:
            return "–í–∏–¥–∏–º—ã–π —Å–≤–µ—Ç"
        elif 7e-7 <= result < 1e-3:
            return "–ò–Ω—Ñ—Ä–∞–∫—Ä–∞—Å–Ω–æ–µ –∏–∑–ª—É—á–µ–Ω–∏–µ"
        elif 1e-3 <= result < 1:
            return "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω—ã"
        else:
            return "–†–∞–¥–∏–æ–≤–æ–ª–Ω—ã"

def send_example_file(chat_id):
    example_data = """400 0.1
401 0.15
402 0.3
403 0.5
404 0.8
405 1.0
406 0.9
407 0.7
408 0.4
409 0.2
410 0.1"""
    
    bot.send_message(chat_id, "–í–æ—Ç –ø—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:\n\n" + example_data)

@bot.message_handler(content_types=['document'])
def handle_document(message):
    global stage
    if stage == 11:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ
        with open('spectrum.txt', 'wb') as new_file:
            new_file.write(downloaded_file)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        try:
            peak_wavelength, fwhm = process_spectrum('spectrum.txt')
            bot.send_message(message.chat.id, f'–ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞: {peak_wavelength} nm\n–®–∏—Ä–∏–Ω–∞ –Ω–∞ –ø–æ–ª—É–≤—ã—Å–æ—Ç–µ: {fwhm} nm')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            plot_spectrum('spectrum.txt')
            with open('spectrum_plot.png', 'rb') as photo:
                bot.send_photo(message.chat.id, photo)
        except Exception as e:
            bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}')
        finally:
            os.remove('spectrum.txt')
            os.remove('spectrum_plot.png')
            markup = types.InlineKeyboardMarkup()
            itembtn1 = types.InlineKeyboardButton(text="–î–∞", callback_data='–î–∞')
            itembtn2 = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data='–ù–µ—Ç')
            markup.add(itembtn1, itembtn2)
            bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞?", reply_markup=markup)
            stage = 1

def process_spectrum(filename):
    data = np.loadtxt(filename)
    wavelengths = data[:, 0]
    intensities = data[:, 1]

    max_intensity = np.max(intensities)
    max_index = np.argmax(intensities)
    peak_wavelength = wavelengths[max_index]

    half_max = max_intensity / 2
    indices_above_half_max = np.where(intensities >= half_max)[0]
    fwhm_start = wavelengths[indices_above_half_max[0]]
    fwhm_end = wavelengths[indices_above_half_max[-1]]
    fwhm = fwhm_end - fwhm_start

    return peak_wavelength, fwhm

def plot_spectrum(filename):
    data = np.loadtxt(filename)
    wavelengths = data[:, 0]
    intensities = data[:, 1]

    max_intensity = np.max(intensities)
    max_index = np.argmax(intensities)
    peak_wavelength = wavelengths[max_index]

    half_max = max_intensity / 2
    indices_above_half_max = np.where(intensities >= half_max)[0]
    fwhm_start = wavelengths[indices_above_half_max[0]]
    fwhm_end = wavelengths[indices_above_half_max[-1]]

    plt.figure(figsize=(10, 5))
    plt.plot(wavelengths, intensities, label='–°–ø–µ–∫—Ç—Ä')
    plt.axvline(peak_wavelength, color='r', linestyle='--', label='–ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞')
    plt.axvline(fwhm_start, color='g', linestyle='--', label='–®–∏—Ä–∏–Ω–∞ –Ω–∞ –ø–æ–ª—É–≤—ã—Å–æ—Ç–µ (–Ω–∞—á–∞–ª–æ)')
    plt.axvline(fwhm_end, color='g', linestyle='--', label='–®–∏—Ä–∏–Ω–∞ –Ω–∞ –ø–æ–ª—É–≤—ã—Å–æ—Ç–µ (–∫–æ–Ω–µ—Ü)')
    plt.title('–°–ø–µ–∫—Ç—Ä —Å —Ä–µ–∑–æ–Ω–∞–Ω—Å–æ–º –∏ —à–∏—Ä–∏–Ω–æ–π –Ω–∞ –ø–æ–ª—É–≤—ã—Å–æ—Ç–µ')
    plt.xlabel('–î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã')
    plt.ylabel('–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å')
    plt.legend()
    plt.grid()
    plt.savefig('spectrum_plot.png')  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞

def calculate_fluence(message, variant):
    if variant == '–î–∞':
        global stage
        power = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω—é—é –º–æ—â–Ω–æ—Å—Ç—å (–í—Ç): ")
        bot.register_next_step_handler(power, get_fluence_area)
        stage = 8
    else:
        bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ /select_calc.")
        stage = 0

def get_fluence_area(message):
    global stage
    global power
    power = message.text
    try:
        power = float(power)
        if power > 0:
            area = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å (—Å–º¬≤): ")
            bot.register_next_step_handler(area, get_fluence_rep, power)
            stage = 9
        else:
            bot.send_message(message.chat.id, "–ú–æ—â–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.‚ùå\n–î–ª—è –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ /select_calc.")
            stage = 0
    except ValueError:
        bot.send_message(message.chat.id, "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º.‚ùå\n–î–ª—è –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ /select_calc.")
        stage = 0

def get_fluence_rep(message, power):
    global stage
    global area
    area = message.text
    try:
        area = float(area)
        if area > 0:
            rep = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π(–ì—Ü): ")
            bot.register_next_step_handler(rep, compute_fluence, power, area)
            stage = 10
        else:
            bot.send_message(message.chat.id, "–ü–ª–æ—â–∞–¥—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.‚ùå\n–î–ª—è –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ /select_calc.")
            stage = 0
    except ValueError:
        bot.send_message(message.chat.id, "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º.‚ùå\n–î–ª—è –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ /select_calc.")
        stage = 0

def compute_fluence(message, power, area):
    global stage
    global rep
    rep = message.text
    try:
        rep = float(rep)
        if rep > 0:
            fluence = power / (area*rep)  # –§–ª—é–µ–Ω—Å = –º–æ—â–Ω–æ—Å—Ç—å / –ø–ª–æ—â–∞–¥—å*—á–∞—Å—Ç–æ—Ç—É
            bot.send_message(message.chat.id, f"–§–ª—é–µ–Ω—Å: {fluence} –î–∂/—Å–º¬≤")
            markup = types.InlineKeyboardMarkup()
            itembtn1 = types.InlineKeyboardButton(text="–î–∞", callback_data='–î–∞')
            itembtn2 = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data='–ù–µ—Ç')
            markup.add(itembtn1, itembtn2)
            bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞?", reply_markup=markup)
            stage = 1
        else:
            bot.send_message(message.chat.id, "–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.‚ùå\n–î–ª—è –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ /select_calc.")
            stage = 0
    except ValueError:
        bot.send_message(message.chat.id, "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º.‚ùå\n–î–ª—è –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ /select_calc.")
        stage = 0

def feedback(message, variant):
    global stage
    if variant == '–î–∞':
        mesg = bot.send_message(message.chat.id,
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –¥–æ–≤–æ–ª–µ–Ω –æ–ø—ã—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –æ—Ç 1 –¥–æ 5?(1/2): ")
        bot.register_next_step_handler(mesg, send_feedback)
    else:
        bot.send_message(message.chat.id, "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /select_calc.")
        stage = 0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã

def send_feedback(message):
    global stage
    bot.forward_message(
    chat_id=5437366760,  # chat_id —á–∞—Ç–∞ –≤ –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    from_chat_id=message.chat.id,  # chat_id –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_id=message.message_id  # message_id –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å
    )
    next_question = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏, –∫–∞–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –≤ –±–æ—Ç–µ?(2/2): ")
    bot.register_next_step_handler(next_question, handle_question)

def handle_question(message):
    global stage
    bot.forward_message(
        chat_id=5437366760,  # chat_id —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        from_chat_id=message.chat.id,  # chat_id –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_id=message.message_id  # message_id, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å
    )
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /select_calc.")
    stage = 0

@bot.callback_query_handler(func=lambda call: True)
def answering(call):
    if stage == 0:
        calc(call.message, call.data)
    elif stage == 1:
        feedback(call.message, call.data)
    elif stage == 2:
        calc_next(call.message, call.data)
    elif stage == 3:
        next_calc(call.message, call.data)
    elif stage == 4:
        nexxt_calc(call.message, call.data)
    elif stage == 5:
        nexxxt_calc(call.message, call.data)
    elif stage == 6:
        nexxxxt_calc(call.message, call.data)
    elif stage == 7:
        calculate_fluence(call.message, call.data)
    elif stage == 8:
        get_fluence_area(call.message)
    elif stage == 9:
        get_fluence_rep(call.message)
    elif stage == 10:
        compute_fluence(call.message)
    elif stage == 11:
        handle_document(call.message)

bot.infinity_polling()
